swirl()
library(swirl)
install.packages(c("boot", "class", "cluster", "codetools", "digest", "foreign", "httr", "jsonlite", "KernSmooth", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "RCurl", "rpart", "spatial", "swirl"))
install.packages(c("boot", "codetools", "foreign", "jsonlite", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime", "nlme", "survival"))
install.packages("manipulate")
install.packages(c("manipulate", "RCurl"))
load("~/Documents/Work/R/Coursera/Regression.RData")
install.packages("manipulate")
install.packages(c("boot", "car", "caret", "class", "cluster", "codetools", "CORElearn", "foreach", "foreign", "ggplot2", "iterators", "jsonlite", "KernSmooth", "lattice", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pbkrtest", "quantreg", "randomForest", "rattle", "Rcpp", "RcppEigen", "rpart", "rpart.plot", "scales", "SparseM", "spatial", "stringi", "survival"))
install.packages("caret")
0.75 * 0.3 / (0.75 * 0.3 + 0.48*0.7)
pnorm(70, mean = 80, sd =10, lower.tail =  = TRUE)
pnorm(70, mean = 80, sd =10, lower.tail =  TRUE)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 7.5)
?ppois
ppois(3, lambda = 5*0.5 )
ppois(3, lambda = 5*0.5 , lower.tail = FALSE)
ppois(3, lambda = 2.5 )
pbinom(3, size = 5, prob = 0.5)
choose(5,2)
choose(2,5)
choose(5,4) * o.5^4* 0.5^1 + choose(5,5) * 0.5^5
choose(5,4) * 0.5^4* 0.5^1 + choose(5,5) * 0.5^5
ppois(10, lambda = 15)
source('~/.active-rstudio-document')
install.packages("httr")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
1100 + c(1, -1) * qt(0.95, 8) * 30/sqrt(9)
1100 + c(-1, 1) * qt(0.95, 8) * 30/sqrt(9)
1100 + c(-1, 1) * qt(0.975, 8) * 30/sqrt(9)
library(datasets)
data(iris)
?iris
iris
View(iris)
iris[,iris$Species == 'virginica']
iris[,iris$Species = 'virginica']
iris[,'virginica']
isir$Species
iris$Species
iris$Species == 'virginica'
iris[iris$Species == 'virginica',]
mean(iris[iris$Species == 'virginica',]$Sepal.Length)
library(datasets)
data(mtcars)
?mcars
?mtcars
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
View(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.2 - 82.6
debug(ls)
ls
debug(ls)
ls
ls
?ggplot2
ls()
source('~/Documents/Git/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
View(cacheSolve)
View(makeCacheMatrix)
set.seed(1)
rpois(5, 2)
?
rpois
?rnorm
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
y
plot(y)
plot(x,y)
install.packages("pandoc")
install.packages("xtable")
install.packages("AppliedPredictiveModeling")
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
scriptLocation()
665+399/ (665 + 399 + 54 +32)
(665+399)/ (665 + 399 + 54 +32)
install.packages("shiny")
install.packages("leaflet")
library(shiny)
library(leaflet)
data("quakes")
map <- leaflet(height = 650, width = 900)
map <- addTiles(map, group = "OpenStreetMap")
map <- addProviderTiles(map, provider = "MapQuestOpen.Aerial", group = "MapQuestOpen")
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = 5 ^ quakes$mag,
popup = paste0('Magnitude: ', quakes$mag),
group = "Richter Magnitude",
fillColor = "green",
fill = TRUE,
stroke = FALSE,
fillOpacity = 1
)
map
data("quakes")
map <- leaflet(height = 650, width = 900)
map <- addTiles(map, group = "OpenStreetMap")
map <- addProviderTiles(map, provider = "MapQuestOpen.Aerial", group = "MapQuestOpen")
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = 5 ^ quakes$mag,
popup = paste0('Magnitude: ', quakes$mag),
group = "Magnitude",
fillColor = "green",
fill = TRUE,
stroke = FALSE,
fillOpacity = 1
)
map
View(quakes)
2 ^ quakes$depth
quakes$depth
quakes$depth ^ 2
?fillOpacity
?addCircles
data("quakes")
map <- leaflet(height = 650, width = 900)
map <- addTiles(map, group = "OpenStreetMap")
map <- addProviderTiles(map, provider = "MapQuestOpen.Aerial", group = "MapQuestOpen")
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = 5 ^ quakes$mag,
popup = paste0('Magnitude: ', quakes$mag),
group = "Magnitude",
fillColor = "green",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = quakes$depth ^ 2,
popup = paste0('Depth: ', quakes$mag, ' km'),
group = "Depth",
fillColor = "Red",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addLayersControl(map, baseGroups = c("OpenStreetMap",
"MapQuestOpen"),
overlayGroups = c("Magnitude","Depth"))
map
5 ^ quakes$mag
quakes$depth
data("quakes")
map <- leaflet(height = 650, width = 900)
map <- addTiles(map, group = "OpenStreetMap")
map <- addProviderTiles(map, provider = "MapQuestOpen.Aerial", group = "MapQuestOpen")
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = 5 ^ quakes$mag,
popup = paste0('Magnitude: ', quakes$mag),
group = "Magnitude",
fillColor = "green",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = quakes$depth ^ 1.5,
popup = paste0('Depth: ', quakes$depth, ' km'),
group = "Depth",
fillColor = "Red",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addLayersControl(map, baseGroups = c("OpenStreetMap",
"MapQuestOpen"),
overlayGroups = c("Magnitude","Depth"))
map
data("quakes")
map <- leaflet(height = 650, width = 900)
map <- addTiles(map, group = "OpenStreetMap")
map <- addProviderTiles(map, provider = "MapQuestOpen.Aerial", group = "MapQuestOpen")
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = 5 ^ quakes$mag,
popup = paste0('Magnitude: ', quakes$mag),
group = "Magnitude",
fillColor = "green",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = quakes$depth,
popup = paste0('Depth: ', quakes$depth, ' km'),
group = "Depth",
fillColor = "Red",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addLayersControl(map, baseGroups = c("OpenStreetMap",
"MapQuestOpen"),
overlayGroups = c("Magnitude","Depth"))
map
data("quakes")
map <- leaflet(height = 650, width = 900)
map <- addTiles(map, group = "OpenStreetMap")
map <- addProviderTiles(map, provider = "MapQuestOpen.Aerial", group = "MapQuestOpen")
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = 5 ^ quakes$mag,
popup = paste0('Magnitude: ', quakes$mag),
group = "Magnitude",
fillColor = "green",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = quakes$depth ^ 1.1,
popup = paste0('Depth: ', quakes$depth, ' km'),
group = "Depth",
fillColor = "Red",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addLayersControl(map, baseGroups = c("OpenStreetMap",
"MapQuestOpen"),
overlayGroups = c("Magnitude","Depth"))
map
quakes$stations ^ 2
quakes$stations ^ 3
data("quakes")
map <- leaflet(height = 650, width = 900)
map <- addTiles(map, group = "OpenStreetMap")
map <- addProviderTiles(map, provider = "MapQuestOpen.Aerial", group = "MapQuestOpen")
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = 5 ^ quakes$mag,
popup = paste0('Magnitude: ', quakes$mag),
group = "Magnitude",
fillColor = "green",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = quakes$depth ^ 1.2,
popup = paste0('Depth: ', quakes$depth, ' km'),
group = "Depth",
fillColor = "Red",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = quakes$stations ^ 3,
popup = paste0('Number of stations: ', quakes$stations),
group = "Number of stations",
fillColor = "Yellow",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addLayersControl(map, baseGroups = c("OpenStreetMap",
"MapQuestOpen"),
overlayGroups = c("Magnitude","Depth","Number of Stations"))
map
data("quakes")
map <- leaflet(height = 650, width = 900)
map <- addTiles(map, group = "OpenStreetMap")
map <- addProviderTiles(map, provider = "MapQuestOpen.Aerial", group = "MapQuestOpen")
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = 5 ^ quakes$mag,
popup = paste0('Magnitude: ', quakes$mag),
group = "Magnitude",
fillColor = "green",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = quakes$depth ^ 1.2,
popup = paste0('Depth: ', quakes$depth, ' km'),
group = "Depth",
fillColor = "Red",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addCircles(map,
lng = quakes$long,
lat = quakes$lat,
radius = quakes$stations ^ 2,
popup = paste0('Number of stations: ', quakes$stations),
group = "Number of stations",
fillColor = "Yellow",
fill = TRUE,
stroke = FALSE,
fillOpacity = 0.5
)
map <- addLayersControl(map, baseGroups = c("OpenStreetMap",
"MapQuestOpen"),
overlayGroups = c("Magnitude","Depth","Number of Stations"))
map
install.packages("shiny")
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
?addMarkers
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
shiny::runApp('Documents/Git/datasciencecoursera/DataProduct')
ui <- fluidPage(
source('~/Documents/Git/datasciencecoursera/DataProduct/project.R')
source('~/Documents/Git/datasciencecoursera/DataProduct/project.R')
shiny::runApp('Documents/Git/datasciencecoursera')
shiny::runApp('Documents/Git/datasciencecoursera')
shiny::runApp('Documents/Git/datasciencecoursera')
shiny::runApp('Documents/Git/datasciencecoursera')
data(quakes)
quakes
min(quakes$stations)
max(quakes$stations)
min(quakes$depth)
max(quakes$depth)
min(quakes$mag)
max(quakes$mag)
setwd("~/Documents/Git/datasciencecoursera/DataProduct")
setwd("~/Documents/Git/datasciencecoursera/DataProduct")
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
shiny::runApp()
rsconnect::setAccountInfo(name='yanw', token='4B30DC78CFC4A54C74B0A55D7EBFC314', secret='hmfbzzrFtwxJop7pqQhg46cpQBpwWQRGgyLrTLWg')
shiny::runApp()
?shiny
